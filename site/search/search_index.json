{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cloco Documentation","text":""},{"location":"Dozzle%20Docker%20Log/","title":"View Docker Log: Dozzle","text":""},{"location":"Dozzle%20Docker%20Log/#introduction","title":"Introduction","text":"<p>Dozzle is a small lightweight application with a web based interface to monitor Docker logs. It is for live monitoring of your container logs only.</p>"},{"location":"Dozzle%20Docker%20Log/#installation","title":"Installation","text":"<p>The easiest way to setup Dozzle is to use the CLI and mount docker.sock file.</p> <pre><code>docker run --detach --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle\n</code></pre> <p>This will run the dozzle in the port 8080 by default and you can change it to your desired port.</p> <p>Another way to setup dozzle is using docker compose. You can make following changes to the docker compose file.</p> <pre><code>version: \"3\"\nservices:\n  dozzle:\n    container_name: dozzle\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 9999:8080\n</code></pre> <p>Now you can use port 8080 and search the desired container of docker that you want to see your logs.</p>"},{"location":"Dozzle%20Docker%20Log/#reference-link","title":"REFERENCE LINK","text":"<p>Dozzle Getting Started</p>"},{"location":"Dozzle%20Docker%20Log/#knowledge-based","title":"Knowledge Based","text":""},{"location":"Dozzle%20Docker%20Log/#problem-1-port-already-in-use-for-8080","title":"Problem 1: Port already in use for 8080","text":"<p>In this case you can either use different port when configuring dozzle or you can stop the container running in port 8080 by using these commands. This is for terminating certain process of the system. </p> <p>Also, it is very risky so know what you are doing before killing a process.</p> <pre><code>sudo lsof -i:&lt;port_number&gt; //This will view port running in that port number \n\nsudo kill -9 &lt;PID&gt;  //This will terminate the process running of that PID\n\nExample:\nsudo lsof -i:3000\nsudo kill -9 2133\n</code></pre>"},{"location":"Github-Workflow/","title":"Github Workflow","text":""},{"location":"Github-Workflow/#steps-to-setup-project","title":"Steps to Setup project","text":"<ol> <li>Make sure there is SSH setup in your system and is linked with the gitub.</li>  Follow this link if you haven't setup SSH (SSH Setup)  <li>Clone the project using SSH. </li> <pre><code>git clone &lt;project_link_ssh&gt;  //Replace project_link_ssh with your project ssh link\n\nExample:\ngit clone git@github.com:cloco-account/Cloco-Documentation.git\n</code></pre> <li>Move to the cloned project </li> <pre><code>cd &lt;folder_name&gt;  //Replace folder_name with your project folder name\n\nExample:\ncd cloco_project1\n</code></pre> <li>There will be make file and then follow the commands mentioned in the make file accordingly to run the project</li> </ol>"},{"location":"Github-Workflow/#branching","title":"Branching","text":"<p>There are certain number of branches in every project here in Cloco and every branch carry its own meaning and its purpose.  Let's discuss each branches that we organize our codes on: </p> <ol> <li> Master Branch</li>     This branch is production branch. Only devops teams and project leader should be able to edit this or make pr requests to this branch.  <pre><code>git checkout master\n</code></pre> <li> Hotfix Branch </li>     This branch is responsible for quick patch for issues/bugs found in production environment. This could be a bug causing a major problem in production. This branch should be created from `master` and merged to `staging` and then `master`  <pre><code>git checkout -b hotfix/&lt;issue_description&gt; master \n\nExample: \ngit checkout -b hotfix/reloading_issue_fixed master\n</code></pre> <li> Staging Branch </li>     This branch is responsible for next production release branch with all latest features and bugfix from develop branch. All tagging should be done here before creating **_PR_** to `master`.  <pre><code>git checkout staging \n</code></pre> <li>Develop Branch </li>     This branch is responsible for active development branch where all new features and bugfixes are merged. This branch should be deployed in dev environmemt for testing  <pre><code>git checkout develop\n</code></pre> <li>feature/ Branch </li>     This branch is responsible for creating specific feature. This branch needs to be created or updated with latest develop branch. After creating the feature and throughly reverifying it, PR needs to be created against develop branch.   <pre><code>git checkout -b feature/123 develop\n</code></pre> <li> bugfix/ Branch </li> </ol> <p>This branch is responsible for fixing specific bug or issues found in develop environment. This branch needs to be created or updated with latest develop branch. After fixing the bug or issue and throughly reverifying it, PR needs to be created against develop branch.</p> <pre><code>git checkout -b bugfix/123 develop\n</code></pre>"},{"location":"Github-Workflow/#branch-access-levels","title":"Branch Access Levels","text":"<p>Only Team Leads and Project Manager should have direct push access to <code>master</code>, <code>staging</code> and <code>develop</code> branch.</p>"},{"location":"Github-Workflow/#guidelines-for-pull-requests-pr","title":"Guidelines For Pull Requests (PR)","text":"<ol> <li>Make sure your current working branch is updated with latest changes of <code>develop</code> branch or the branch from which this branch was created.</li> <li>Latest changes from your code should not break previously written tests.</li> <li>Your branch for bugfix and feature should not touch multiple issues/features/bugs. One branch should fix/add only one bug/feature.</li> <li>Make sure required feature/bug works/fixed perfectly as per your understanding.</li> <li>Make sure there isn't any performance issues.(Don't forget to check any console or log errors)</li> <li>Make sure your commit message gives proper gist of the changes.(In some scenarios where commit message doesn't cover the gist, clear and concise description of changelog should be written.)</li> <li>Reviewers and assignee needs to be mentioned in the PR</li> </ol>"},{"location":"Github-Workflow/#basic-guidelines-for-code-review","title":"Basic Guidelines for Code Review","text":"<p>Following things should be kept in mind while doing code review.</p> <ol> <li>Make sure requested PR doesn't break existing features in any kind.</li> <li>Verify that previously written tests doesn't break.</li> <li>Make sure the requested PR doesn't touch multiple features/bugs.</li> <li>Check if the changes meets the feature/bug requirements mentioned in the ticket.</li> <li>OOP concept has been followed in class based component. </li> <li>DRY(Don't Repeat Yourself) and KISS (Keep It Simple, Stupid) principle must be followed.</li> <li>Proper Enums should be used if possible.</li> </ol>"},{"location":"Github-Workflow/#merge-strategy","title":"Merge Strategy","text":"<p>Team Member/any person who are Reviewers or assignee in PR is only responsible for approving the changes, which need to merged as soon as it is approved to the respective branch. Also reviewers and assignes needs to be mentioned. After checking the PR and checking don't forget to change the assignee and reviewers.</p>"},{"location":"Github-Workflow/#tagging-strategy","title":"Tagging Strategy","text":"<p>A tag is like a branch that doesn\u2019t change. Unlike branches, tags, after being created, have no further history of commits.</p> <p>Major Tag - Major version is a definite release of the product. It increases when there are significant changes in functionality.</p> <p>Minor/Feature Tag - Minor version is incremented when only new features or major bug fixes have been added.</p> <p>Upgrade/Patch Tag - Upgrade refers to the replacement of a product with a newer version of product. It is incremented only when upgrade is provided on designated major release.Patch version starts with 0 and incremented only when bug has been resolved.</p> <p>Date - Release date should be with underscore format <code>mm_dd_YYYY</code></p> <p>Example: v1_3.2.5.01_04_2020:</p> <ol> <li> <p>v1: This indicates the version number. It suggests that this tag corresponds to version 1 of the software.</p> </li> <li> <p>3.2.5: This represents a more detailed version number or release identifier. It follows a convention where the version consists of multiple components (major, minor, and patch version numbers respectively). In this case, it means version is 3.2.5.</p> </li> <li> <p>01_04_2020: This part represents a date. In this case, it is January 4, 2020, formatted as day_month_year.</p> </li> </ol> <p>Please follow this link to clarify further and make changes accordingly for tagging.</p> <p>https://atlassian.com/git/tutorials/inspecting-a-repository/git-tag</p>"},{"location":"Github-Workflow/#ways-to-do-some-actions-in-git-branch-for-newbies","title":"Ways to do some actions in git branch (For Newbies)","text":"<ol> <li>To Create Branch in github</li> <pre><code>git branch -b &lt;branch_name&gt;  //Replace branch_name with your own branch name\n\nExample:\ngit branch -b feature/123\n\nOR\n\ngit checkout -b &lt;branch_name&gt;  //Here this command will create a new branch and will move to that branch\n\nExample:\ngit checkout -b feature/123\n</code></pre> <li>To Change Branch in github</li> <pre><code>git checkout &lt;branch_name&gt;  //Here replace branch_name with your own branch name \n\nExample:\ngit checkout feature/123\n</code></pre>     If there is no such branch it will throw some small error.     **NOTE: Take a pull request before moving out to another branch if branch is recent push on remote**  <pre><code>git pull\n</code></pre> <li>To delete branch in github</li> <pre><code>//This will delete branch locally\n//Make sure that you are not in the branch that is to be deleted. \ngit branch --delete &lt;branch_name&gt;\n\nor\ngit branch -d &lt;branch_name&gt;\n\nExample\ngit branch --delete feature/123\n</code></pre> <li>To list out all branches in git that are in projects </li> <pre><code>git branch -a\n</code></pre> <li> To see the commits in git </li> <pre><code>git log\n</code></pre> <li> To Merge two branches </li> <pre><code>// First checkout to your branch then merge that branch to current branch \ngit merge &lt;branch_name&gt;  // Replace with your Branch_name \n\nExample:\ngit checkout feature/123\ngit merge trial_cloco\n</code></pre> <li> To push local branch to remote </li> <pre><code>git push origin &lt;branch_name&gt;  //Replace branch_name with your own branch \n\nExample:\ngit push origin feature/123\n</code></pre> <li> To Stash your changes </li> </ol> <pre><code>git stash // To Discard the changes that you made on that branch and save that changes in recent stash\n\ngit stash pop //This will apply the stashed changes that was made and delete that stash\n\ngit stash apply // This will apply the stashed changes and will not delete that stash ::Reusuable stash\n\ngit stash show // Show the files in the most recent stash:\n\ngit stash list // List the stashes\n\ngit stash show -p stash@{1} //This will show the latest stash changes without applying it and {1} can be changed according to the git stash changes you want to see\n\n</code></pre>"},{"location":"Github-Workflow/#knowledge-based","title":"Knowledge Based","text":"<p>Problems that you may encounter related to github</p>"},{"location":"Github-Workflow/#error-1-unable-to-detect-email-address","title":"Error-1: Unable to detect email address","text":"<p>Solution</p> <p>if You get these types of error please follow these steps to resolve the issue</p> <pre><code>fatal: unable to auto-detect email address\n</code></pre> <p>Step-1: Insert these commands in the CMD</p> <pre><code>cd &lt;project_directory&gt;\ngit config user.email \"your github email\"\ngit config user.name \"your github name\"\n\nExample:\ncd cloco_project\ngit config user.email \"cloco@gmail.com\"\ngit config user.name \"Cloco\"\n</code></pre> <p>Step-2: A pop-up with sign in with browser will appear. Make sure you are logged in your GitHub Account. Click on the sign in with browser and then click Authorize</p> <p>These Steps should resolve your issue now and rerun the process to push your code to the remote repository</p>"},{"location":"Python%20Package%20Manager/","title":"Python Package Manager : Poetry","text":""},{"location":"Python%20Package%20Manager/#introduction","title":"Introduction","text":"<p>Poetry is a Python Package Manager released in 2018. It is designed to simplify package management and make it more consistent across different platforms. It is similar to pip but with more advanced features.</p>"},{"location":"Python%20Package%20Manager/#installation","title":"Installation","text":"<p>There are many ways you can install poetry. And here we are going to use pipx to download and install poerty. If you want to install poerty in other ways you can follow this link for the installation.</p> <p>https://python-poetry.org/docs/#installing-with-pipx</p> <p>To download poetry using pipx you need to install pipx into your system. And to install pipx into your system you can follow these steps </p> <pre><code>// Download pipx into  the system\n\n// For Linux\nsudo apt update\nsudo apt install pipx\npipx ensurepath\n\n// For MacOS\nbrew install pipx\npipx ensurepath\n</code></pre> <p>Now check if pipx is installed into your system then you can follow these steps to install poetry using pipx</p> <pre><code>pipx install poetry\n</code></pre>"},{"location":"Python%20Package%20Manager/#examples","title":"Examples","text":"<p>Some of the examples using poetry:</p> <pre><code>poetry new poetry-demo //This will create a poetry-demo directory with some certain file structure\n\npoetry install //This will install all defined dependencies that are in your project\n</code></pre>"},{"location":"Python%20Package%20Manager/#reference-link","title":"REFERENCE LINK","text":"<p>Installing Poetry With Pipx</p> <p>Installing Pipx</p>"},{"location":"Python%20Package%20Manager/#knowledge-based","title":"Knowledge Based","text":"<p>Problems you may encounter when using poetry</p>"},{"location":"Python%20Package%20Manager/#problem-1-unable-to-delete-or-upgrade-poetry-from-your-system","title":"Problem 1: Unable to delete or upgrade poetry from your system","text":"<p>You can uninstall or upgrade poetry using pipx using these following simple command</p> <pre><code>pipx uninstall poetry //This will uninstall poetry from your system\n\npipx upgrade poetry //This will update the latest poetry to your system \n</code></pre>"},{"location":"Python%20Version%20Management%20Tool/","title":"Python Version Management Tool: Pyenv","text":""},{"location":"Python%20Version%20Management%20Tool/#introduction","title":"Introduction","text":"<p>Pyenv is used for handling multiple python version in your system. It is simple Python Version Management tool. It\u2019s a lifesaver when you\u2019re working on different projects that require different Python versions. </p>"},{"location":"Python%20Version%20Management%20Tool/#installation","title":"Installation","text":"<ol> <li>Install all the required packages using one-liner provided by the automatic installer for pyenv required packages</li> <pre><code>curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | zsh  //if you are using bash change zsh to bash\n</code></pre> <li> Grab the latest pyenv source tree from its Github repo</li> <pre><code>git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv\n</code></pre> <li> Set the environment variable PYENV_ROOT</li>     Open .zshrc file or .bashrc file and paste these code  <pre><code>## pyenv configs\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\n\nif command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval \"$(pyenv init -)\"\nfi\n</code></pre> <li> Restart the shell for the PATH changes to take effect. </li> <pre><code>exec \"$SHELL\"\n</code></pre> </ol>"},{"location":"Python%20Version%20Management%20Tool/#ways-to-install-multiple-python-version","title":"Ways to install multiple python Version","text":"<pre><code># View all available versions with this command.\npyenv install -l\n\n# You can now install multiple Python version via pyenv, for example.\npyenv install 3.6.4\npyenv install 3.6.5\n\n# List all Python versions available to pyenv\npyenv versions\n\n# Check the global Python version\npyenv global\n\n# Set the global python version using the pyenv command\npyenv global 3.6.5\npyenv global\n\n# Set the local Python version on per-project basis\n# For instance, if you have a project located in $HOME/python_projects/test,\n# you can set the Python version of it using following command.\ncd python_projects/test\npyenv local 3.6.5\npyenv version       #view local python version for a specific project\n</code></pre>"},{"location":"Python%20Version%20Management%20Tool/#extras","title":"Extras","text":"<p>Pyenv manages virtual environments via the pyenv-virtualenv plugin which automates management of virtualenvs and conda environments for Python on Linux and other UNIX-like systems.</p> <p>Installing pyenv-virtualenv plugin</p> <pre><code>git clone https://github.com/yyuu/pyenv-virtualenv.git $HOME/.pyenv/plugins/pyenv-virtualenv\nsource $HOME/.zshrc # Replace zshrc with bash accoring to your requirement\n</code></pre> <p>Create a test virtual environment</p> <p>called venv_project1 </p> <pre><code>mkdir project1\ncd project1\npyenv virtualenv 3.6.5 venv_project1\n</code></pre> <p>Note: Make sure required pyenv version is installed before setting that version as its virtual environment </p>"},{"location":"Python%20Version%20Management%20Tool/#reference-link","title":"REFERENCE LINK","text":"<p>Pyenv</p> <p>Pyenv Structure</p>"},{"location":"Python%20Version%20Management%20Tool/#knowledge-based","title":"Knowledge Based","text":"<p>Problems you may encounter when using pyenv</p>"},{"location":"Python%20Version%20Management%20Tool/#problem-1-zsh-pyenv-not-found-or-bash-pyenv-not-found","title":"Problem 1: zsh: pyenv not found or bash: pyenv not found","text":"<p>Make sure you have correctly followed the above installation process. If the problem still exists. Make sure to restart the shell.</p> <pre><code>exec \"$SHELL\"\n</code></pre>"},{"location":"SSH-Key%20Management/","title":"SSH Key Management","text":""},{"location":"SSH-Key%20Management/#introduction","title":"Introduction","text":"<p>SSH key management involves the generation, distribution, and secure storage of SSH (Secure Shell) keys used for authentication between systems. It contains two parts i.e Public key(id_rsa.pub) and Private key(id_rsa). Public Key from SSH is inserted into the github account under the SSH Key in setting and Private Key from SSH is stored into the host system to authenticate the user.</p>"},{"location":"SSH-Key%20Management/#ways-to-generate-ssh-key-pair-on-unix-and-unix-like-systems","title":"Ways to generate SSH Key Pair on UNIX and UNIX-Like Systems","text":"<ol> <li> Run the ssh-keygen command. </li> <pre><code>ssh-keygen -t rsa  //Works for simply generating ssh key pair\n\nor\n\nssh-keygen -t rsa -f ~/.ssh/&lt;filename&gt; -C &lt;email_address&gt; //It will generate ssh key pair with filename for particular email\n\nExample:\nssh-keygen -t rsa -f ~/.ssh/personal -C personal@gmail.com\n</code></pre>     You can use the -t option to specify the type of key to create. You can also generate ssh key pair using other algorithm rather than only rsa.  <li> The command prompts you to enter the path to the file in which you want to save the key.</li>     A default path and file name are suggested in parentheses. For example:  <pre><code>/home/&lt;user_name&gt;/.ssh/id_rsa \n</code></pre>     To accept the default path and file name, press Enter. Otherwise, enter the required path and file name, and then press Enter.  <li> The command prompts you to enter a passphrase. </li>     The passphrase is not mandatory. However, it is recommended that you specify a passphrase to protect your private key against unauthorized use.  <li> When prompted, enter the passphrase again to confirm it.</li> <li> Test SSH connection: </li> </ol> <pre><code>To ensure that everything is setup correctly, test the SSH connection to Github.\n</code></pre> <pre><code>ssh -T git@github.com\n</code></pre> <p>The command generates an SSH key pair consisting of a public key and a private key, and saves them in the specified path. The file name of the public key is created automatically by appending .pub to the name of the private key file. For example, if the file name of the SSH private key is id_rsa, the file name of the public key would be id_rsa.pub.</p> <p>Now, You need to paste the id_rsa.pub key from .ssh folder into the github account under the SSH key section in github setting.</p>"},{"location":"SSH-Key%20Management/#reference-link","title":"REFERENCE LINK","text":"<p>Generate SSH</p>"},{"location":"SSH-Key%20Management/#knowledge-based","title":"Knowledge Based","text":"<p>Problems you may encounter during ssh setup</p>"},{"location":"SSH-Key%20Management/#problem-1-pasting-private-key-in-github-instead-of-public-key-from-ssh","title":"Problem 1: Pasting private key in Github instead of Public key from ssh","text":"<p>Remember that in .ssh folder there are two file upon the ssh key pair generation. Private key is with file name id_rsa and public key is with file name id_rsa.pub.</p> <p>Insert the contents of id_rsa.pub into the github account under the section settings/SSH and GPG keys </p>"},{"location":"SSH-Key%20Management/#problem-2-generate-multiple-ssh-for-using-multiple-github-account-in-one-system","title":"Problem 2: Generate multiple SSH for using multiple github account in one System","text":"<pre><code>ssh-keygen -t rsa -f ~/.ssh/&lt;filename&gt; -C &lt;email_address&gt;\n\nExample:\nssh-keygen -t rsa -f ~/.ssh/personal -C personal@gmail.com\n</code></pre> <p>Create config file in .ssh folder and write these lines in config file.</p> <pre><code>Host github.com\n  Hostname github.com\n  IdentityFile ~/.ssh/id_rsa\n\nHost github.com-personal\n  Hostname github.com\n  IdentityFile ~/.ssh/personal\n</code></pre> <p>Move to your project and setup git user config</p> <pre><code>cd &lt;project_folder&gt; // Replace project_folder with your own project_folder\ngit config user.email \"&lt;email_address&gt;\" // Replace email_address with your own email_address\ngit config user.name \"&lt;user_name&gt;\" // Replace user_name with your own user_name\n\nExample:\ncd cloco_project\ngit config user.email \"cloco@gmail.com\"\ngit config user.name \"cloco\"\n</code></pre>"}]}